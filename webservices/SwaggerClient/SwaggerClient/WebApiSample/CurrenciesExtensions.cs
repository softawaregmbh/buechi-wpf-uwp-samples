// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using SwaggerClient;
using SwaggerClient.Models;

namespace SwaggerClient
{
    public static partial class CurrenciesExtensions
    {
        /// <param name='operations'>
        /// Reference to the SwaggerClient.ICurrencies.
        /// </param>
        /// <param name='amount'>
        /// Required.
        /// </param>
        public static IList<CurrencyData> GetAll(this ICurrencies operations, int amount)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICurrencies)s).GetAllAsync(amount);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the SwaggerClient.ICurrencies.
        /// </param>
        /// <param name='amount'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<CurrencyData>> GetAllAsync(this ICurrencies operations, int amount, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<SwaggerClient.Models.CurrencyData>> result = await operations.GetAllWithOperationResponseAsync(amount, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the SwaggerClient.ICurrencies.
        /// </param>
        /// <param name='symbol'>
        /// Required. Currency symbol in upper case
        /// </param>
        public static CurrencyData GetBySymbol(this ICurrencies operations, string symbol)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICurrencies)s).GetBySymbolAsync(symbol);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the SwaggerClient.ICurrencies.
        /// </param>
        /// <param name='symbol'>
        /// Required. Currency symbol in upper case
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<CurrencyData> GetBySymbolAsync(this ICurrencies operations, string symbol, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<SwaggerClient.Models.CurrencyData> result = await operations.GetBySymbolWithOperationResponseAsync(symbol, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the SwaggerClient.ICurrencies.
        /// </param>
        /// <param name='data'>
        /// Required.
        /// </param>
        public static string Insert(this ICurrencies operations, CurrencyData data)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICurrencies)s).InsertAsync(data);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the SwaggerClient.ICurrencies.
        /// </param>
        /// <param name='data'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> InsertAsync(this ICurrencies operations, CurrencyData data, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.InsertWithOperationResponseAsync(data, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the SwaggerClient.ICurrencies.
        /// </param>
        /// <param name='query'>
        /// Required.
        /// </param>
        public static IList<CurrencyData> Search(this ICurrencies operations, CurrencyQuery query)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICurrencies)s).SearchAsync(query);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the SwaggerClient.ICurrencies.
        /// </param>
        /// <param name='query'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<CurrencyData>> SearchAsync(this ICurrencies operations, CurrencyQuery query, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<SwaggerClient.Models.CurrencyData>> result = await operations.SearchWithOperationResponseAsync(query, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the SwaggerClient.ICurrencies.
        /// </param>
        /// <param name='data'>
        /// Required.
        /// </param>
        public static object Update(this ICurrencies operations, CurrencyData data)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICurrencies)s).UpdateAsync(data);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the SwaggerClient.ICurrencies.
        /// </param>
        /// <param name='data'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> UpdateAsync(this ICurrencies operations, CurrencyData data, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.UpdateWithOperationResponseAsync(data, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
